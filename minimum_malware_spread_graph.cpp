/*
You have a network of N connected hosts. This network of hosts we can represent in the form of graph. If host i is connected to host j then graph[i][j] value would be 1 else it would be 0.

Now there is a spread of malware from the source node. If node i is infected by malware and i is connected to j i.e.(graph[i][j]==1), then j also would be infected by malware.

So now you have a single chance to atleast minimize the spread of malware by removing one of the node from the network. So find out the node by removing which you can minimize the spread of malware in network.

If there are N nodes so they are numbered 0 to N-1 and source of malware spread would be node 0. If there is no need to remove any node then print -1.

Input Format

1) First line of input would be integer N denoting the number of nodes in network.

2) Next N line of input consists graph of NxN size with values 1 or 0, denoting if node i is connected with j or not.

Constraints

0 < N <100

Output Format

Output would be a single integer denoting the node number, by removing which you can minimize the spread of malware.

Sample Input 0

3
0 1 0
1 0 1
0 1 0
Sample Output 0

1
Sample Input 1

4
0 1 0 0
1 0 1 1
0 1 0 0
0 1 0 0
Sample Output 1

1
*/

#include<bits/stdc++.h>
using namespace std;

int simulateInfection(vector<vector<int>> &arr,int blocked,int n){
    vector<bool> visited(n,false);
    queue<int> q;
    if(blocked!=0){
        q.push(0);
        visited[0]=true;
    }
    while(!q.empty()){
        int node=q.front();
        q.pop();
        for(int i=0;i<n;i++){
            if(arr[node][i]==1 && !visited[i] && i!=blocked){
                visited[i]=true;
                q.push(i);
            }
        }
    }
    int count=0;
    for(bool i:visited){
        if(i) count++;
    }
    return count;
}

int main(){
    int n;
    cin>>n;
    vector<vector<int>> arr(n,vector<int>(n));
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cin>>arr[i][j];
        }
    }
    int orgInfected=simulateInfection(arr,-1,n);
    int minInfected=orgInfected;
    int nodeToRemove=-1;
    for(int i=1;i<n;i++){
        int infected=simulateInfection(arr,i,n);
        if(infected<minInfected){
            minInfected=infected;
            nodeToRemove=i;
        }
    }
    cout<<nodeToRemove<<endl;
    return 0;
}